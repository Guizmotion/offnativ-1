import React, { useEffect, useState, useRef,useMemo } from "react";
import {RecyclerListView, LayoutProvider, DataProvider} from "recyclerlistview";

import {
  Image,
  Text,
  Dimensions,
  View,
  
  FlatList,
  
  RefreshControl,
  
} from "react-native";
import axios from "axios";


import { ShopContext } from "../store/ShopContext";
import { FavorisContext } from "../store/FavorisContext";
import Loader from "./Loader";
import { ADD_PRODUCT } from "../store/reducers";
import { StoreContext } from "../store/store";

//import LikeButton from "../components/LikeButton";
import ProgrammeCard from "./ProgrammeCard";
import ProgrammeHeader from "./ProgrammeHeader";

const baseUrl = "https://appli.ovh/off/app/";
const url_programme = baseUrl + "api2022.php?a=1";


export default function Programme({ navigation }) {
  const { state, dispatch } = React.useContext(StoreContext);
  const context = React.useContext(ShopContext);
  
  // initialize data state variable as an empty array
  
  const [data, setData] = useState([]);
  const [input, setInput] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [visible, setVisible] = useState(true);
  
  
  const [filter, setFilter] = useState("all");
  const [categories, setCategories] = useState("all");
  const [searchText, setSearchText] = useState();
  
  const [refreshing, setRefreshing] = useState(false);
  
  const [isLoading, setIsLoading] = useState(false);
  
  
  
  useEffect(() => {
    setIsLoading(true);
    axios.get(url_programme).then((response) => {
      // setData(response.data);
      dispatch({ type: "addData", payload: response.data });
      setIsLoading(false);
    });
  }, []);
  
  
  /*
  useEffect(() => {
    console.log("context cart length from Programme : :" + context.cart.length);
  }, []);
  */
  
  
  const getItemLayout = (data, index) => (
    { length: 100, offset: 100 * index, index }
  )

 
  
  
  const filteredData = searchText
  ? state.programme.filter(
    (x) =>
    x.description.toLowerCase().includes(searchText.toLowerCase()) ||
    x.nom.toLowerCase().includes(searchText.toLowerCase()) ||
    x.lieu.toLowerCase().includes(searchText.toLowerCase())
    )
    : state.programme;




    let { width } = Dimensions.get("window");

    //Create the data provider and provide method which takes in two rows of data and return if those two are different or not.
    let dataProvider = new DataProvider((r1, r2) => {
        return r1 !== r2;
    });

    //Create the layout provider
    //First method: Given an index return the type of item e.g ListItemType1, ListItemType2 in case you have variety of items in your list/grid
    //Second: Given a type and object set the height and width for that type on given object
    //If you need data based check you can access your data provider here
    //You'll need data in most cases, we don't provide it by default to enable things like data virtualization in the future
    //NOTE: For complex lists LayoutProvider will also be complex it would then make sense to move it to a different file
    
    const ViewTypes = {
      FULL: 0,
      HALF_LEFT: 1,
      HALF_RIGHT: 2
  }


    const layoutProvider = new LayoutProvider(
        index => {
            if (index % 3 === 0) {
                return ViewTypes.FULL;
            } else if (index % 3 === 1) {
                return ViewTypes.HALF_LEFT;
            } else {
                return ViewTypes.HALF_RIGHT;
            }
        },
        (type, dim) => {
            switch (type) {
                case ViewTypes.HALF_LEFT:
                    dim.width = width / 2 - 0.0001;
                    dim.height = 160;
                    break;
                case ViewTypes.HALF_RIGHT:
                    dim.width = width / 2;
                    dim.height = 160;
                    break;
                case ViewTypes.FULL:
                    dim.width = width;
                    dim.height = 140;
                    break;
                default:
                    dim.width = 0;
                    dim.height = 0;
            }
        }
    );


    
    
   // const memoizedValue = useMemo(() => renderItem, [state.programme]);
     /* 
   const layoutProvider = new LayoutProvider(() => {
    const type = 'NORMAL';
    return type;
  }, (type: any , dim: { width: number; height: number; }) => {
    switch (type) {
      case 'NORMAL': 
        dim.width = SCREEN_WIDTH;
        dim.height = 125;
        break;
      default: 
        dim.width = 0;
        dim.height = 0;
        break;
    }
  });
   */ 
     return (
        <View
        style={{flex:1}}
        >
        {isLoading && <Loader />}
        
        
        <ProgrammeHeader />
        
        <RecyclerListView 
  
        rowRenderer={({ item }) => {
          // return renderData(item);
          return <ProgrammeCard item={item} />
        }}
       // dataProvider={filteredData}
       dataProvider={dataProvider.cloneWithRows(state.programme)}                       
        layoutProvider={layoutProvider}
        
                              />
      {/*  <FlatList
        
        //  ListHeaderComponent={() => { return <ProgrammeHeader />}}
      
        data={filteredData }
        
        removeClippedSubviews={true}
        // updateCellsBatchingPeriod={5} 
        maxToRenderPerBatch={15}
        initialNumToRender={5}
       // getItemLayout={() => getItemLayout() }
        
        onEndReached={({ distanceFromEnd }) => {
          if (distanceFromEnd < 0) return;
        }}

        keyExtractor={(item, index) => {
          // console.log("index", index)
          return index.toString();
        }}
       
        
        
        renderItem={({ item }) => {
          // return renderData(item);
          return <ProgrammeCard item={item} />
        }}
        
        
        refreshControl={
          <RefreshControl
          refreshing={refreshing}
          onRefresh={() =>
            dispatch({ type: "addData", payload: filteredData })
          } />
        }
        
        
        />

      */}
        </View>
        );
      }
      