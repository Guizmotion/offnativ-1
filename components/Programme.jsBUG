
import React, { useEffect, useState } from "react";
import { Text,TextInput, View, StyleSheet, ScrollViewButton, Button,FlatList, TouchableOpacity,Modal,Pressable,TouchableWithoutFeedback} from 'react-native';
import axios from 'axios';
import { ActivityIndicator } from 'react-native';
import { Image as ImgLazy } from 'react-native-elements';
import { Detail } from './Detail';
import {Card} from 'react-native-paper';

const baseUrl = 'https://appli.ovh/off/app/';
const url_programme=baseUrl+'api2022.php?a=1';

export default function Programme({ navigation}) {
 
/*


   
   
    {data.map((r,index) => (

     <TouchableOpacity key={index}  onPress={() => navigation.navigate('Detail', {
      id: r.id,
      nom: r.nom,
      description: r.description,
      date: r.date,
      lieu: r.lieu,
      image: r.image,
      

  })}>
      <View key={index}>
      <ImgLazy
              source={{uri: r.image}}
              style={{width: 100, height: 100}}
              key={index}
              PlaceholderContent={<ActivityIndicator />}
            />

            <Text >{r.nom} {r.lieu} {r.date}</Text>

      </View>
  </TouchableOpacity>
  
  ))}


  

  */
// initialize data state variable as an empty array
const [data, setData] = useState([]);

const [input, setInput] = useState([]);
const [modalVisible, setModalVisible] = useState(false);
const [visible, setVisible] = useState(true);
const [itemNom, setItemNom] = useState([]);
const [itemDescription, setItemDescription] = useState([]);
const [itemDate, setItemDate] = useState([]);
const [itemLieu, setItemLieu] = useState([]);
const [itemImage, setItemImage] = useState([]);
const [itemId, setItemId] = useState([]);

const [filter, setFilter] = useState("all");
const [categories, setCategories] = useState("all");
const [searchText, setSearchText] = useState();
//

const ITEM_HEIGHT = 65; // fixed height of item component
const getItemLayout = (data, index) => {
  return {
    length: ITEM_HEIGHT,
    offset: ITEM_HEIGHT * data.length,
    index,
  };
};

// make the fetch the first time your component mounts
useEffect(() => {
  axios.get(url_programme).then(response => setData(response.data));
}, []);

// Handle item press event in parent component that has already access to navigation component
const onItemPress = (item) => {
  navigation.navigate('ItemDetail');
};

function clearModal() {
  setVisible( true );

  setItemNom(null);
  setItemDescription(null);
  setItemDate(null);
  setItemLieu(null);
  setItemImage(null);
  setItemId(null);

}

function fillModal(id,nom,description,date,lieu,image){

  
 // clearModal();
  
  //setLoaderVisible( !loaderVisible );

  
  

  setItemNom(nom);
  
  setItemDescription(description);
  setItemDate(date);
  setItemLieu(lieu);
  setItemImage(image);
  setItemId(id);
  

  
  setModalVisible(true);
  

}

//setLoaderVisible(false);


const filteredData = searchText
    ? data.filter((x) =>
            x.description.toLowerCase().includes(searchText.toLowerCase()) ||
            x.nom.toLowerCase().includes(searchText.toLowerCase()) ||
            x.lieu.toLowerCase().includes(searchText.toLowerCase())

      )
    : data;

/*
return (
  <FlatList 
data={data}
keyExtractor={(r, index) => {
  // console.log("index", index)
  return index.toString();
}}
renderItem={(r, index) => 

<TouchableOpacity key={index}  onPress={() => navigation.navigate('Detail', {
      id: r.id,
      nom: r.nom,
      description: r.description,
      date: r.date,
      lieu: r.lieu,
      image: r.image,
      

  })}>
<View key={index}>
      <ImgLazy
              source={{uri: r.image}}
              style={{width: 100, height: 100}}
              key={index}
              PlaceholderContent={<ActivityIndicator />}
            />

            <Text >{r.nom} {r.lieu} {r.date}</Text>

      </View>
</TouchableOpacity>
} 

/>
);
*/
/*
function Detail({ item }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen {item.nom}</Text>
      <Button
        title="Go to Details... again"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}*/

let item_nom = '';

const renderData = (item) => {

  

  return(
    <TouchableWithoutFeedback 
    delayPressIn={10}
    onPress={fillModal.bind(this,item.id,item.nom,item.description,item.date,item.lieu,item.image)}
    
    >
      

    <Card style = {{padding:10, margin:10, backgroundColor:"#fff"}}>
    
      
   
      
      <ImgLazy
              source={{uri: item.image}}
              style={{width: 100, height: 100}}
              
              PlaceholderContent={<ActivityIndicator />}
            />
    <Text style = {{fontSize:25}}>{item.nom}</Text>
   
</Card>  
</TouchableWithoutFeedback>
  

  )

}




const Item = ({item, onItemPress}) => {
  return (
    <View onPress={onItemPress(item)}>
        <Text >{item.nom}</Text>
    </View>
  );
}



const renderItem = ({item}) => <Item item={item} navigation={navigation} />;
// do the data formatting and manipulation before the flatlist render
const preparedData = data.map((item) => {
  //const created_at = moment(item.created_at).format('YYY/MM/DD HH:mm');
  //const total_value = formatNumber(item.total);
  // only return the properties that need to be rendered and leave everything else
  return {
    label: item.nom,
   // total_value,
    //created_at,
  };
});




return (
  <View >







      <TextInput
      style = {{padding:10, margin:10, backgroundColor:"#fff"}}
            autoCapitalize="none"

            onChangeText={(text) => {
                setSearchText(text);
            }}
            value={searchText}
        />    





    

<FlatList
   data={preparedData}
   renderItem={renderItem}
   getItemLayout={getItemLayout}
   keyExtractor={(item, index) => {
    // console.log("index", index)
    return index.toString();
  }}

  />


<Modal
       // animationType={'slide'}
        transparent={true}
        visible={modalVisible}
        style={{ margin: 0 }}
        onRequestClose={() => {
          //Alert.alert('Modal has been closed.');
          setModalVisible(!modalVisible);
          
        }}>
          <View  style=
          {{flex: 1, 

            height: '100%',
            width: '100%',
            backgroundColor: '#FFFFFF',
 
           marginTop: 0,

          //  borderRadius: 10,
            borderWidth: 1,
           // borderColor: '#fff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderLeftWidth: 0,
            borderRightWidth: 0,
            shadowColor: '#000',
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.8,
            shadowRadius: 2,
            elevation: 1,

             /* borderTopLeftRadius: 10,
              borderTopRightRadius:10,
              borderBottomLeftRadius: 10,
              borderBottomRightRadius:10,*/
            }}>


          

        <Pressable
              
              onPress={() => setModalVisible(!modalVisible)}>
              <Text >Fermer</Text>
            </Pressable>

            <Text >{itemNom}</Text>
            <Text >{itemDescription}</Text>
            <Text >{itemDate}</Text>
            <Text >{itemLieu}</Text>
            <ImgLazy 
            PlaceholderContent={<ActivityIndicator />}
            source={{uri: itemImage}} style={{width: 100, height: 100}}/>
           

           
            
            </View>
      </Modal>




  </View>
  
  );


  /*


    {visible && <View
      style={{
        ...StyleSheet.absoluteFill,
        justifyContent: 'center',
        alignItems: 'center',
      }}>
     <ActivityIndicator
        size="large"
        color="#00B8D4"
        animating={visible}
        style={{ marginBottom: 20 }} />
  </View>} 

  */


  const styles = StyleSheet.create({
    centeredView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      marginTop: 22,
    },
    modalView: {
      margin: 20,
      backgroundColor: 'white',
      borderRadius: 20,
      padding: 35,
      alignItems: 'center',
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2,
      },
      shadowOpacity: 0.25,
      shadowRadius: 4,
      elevation: 5,
    },
    button: {
      borderRadius: 20,
      padding: 10,
      elevation: 2,
    },
    buttonOpen: {
      backgroundColor: '#F194FF',
    },
    buttonClose: {
      backgroundColor: '#2196F3',
    },
    textStyle: {
      color: 'white',
      fontWeight: 'bold',
      textAlign: 'center',
    },
    modalText: {
      marginBottom: 15,
      textAlign: 'center',
    },
  });
/*

renderItem={({ item }) => {


			return (
<TouchableOpacity  
 onPress={() => navigation.navigate('Detail', {item}) 
}>

 
<View>
      <ImgLazy
              source={{uri: item.image}}
              style={{width: 100, height: 100}}
              
              PlaceholderContent={<ActivityIndicator />}
            />

            <Text >{item.nom} </Text>

      </View>
      </TouchableOpacity>

			)
		}}

    */












  }

