
import React, { useEffect, useState } from "react";
import {  Image,Text,TextInput, View, StyleSheet, ScrollViewButton, Button,FlatList, TouchableOpacity,Modal,Pressable,TouchableWithoutFeedback} from 'react-native';
import axios from 'axios';
import { ActivityIndicator, ToastAndroid } from 'react-native';
import { Image as ImgLazy } from 'react-native-elements';
import { Detail } from './Detail';
import {Card} from 'react-native-paper';

import WebView from "react-native-webview";


import styles from './styles/StyleGeneral';


const baseUrl = 'https://appli.ovh/off/app/';
const url_programme=baseUrl+'api2022.php?a=1';





export default function Programme({ navigation}) {
 
/*


   
   
    {data.map((r,index) => (

     <TouchableOpacity key={index}  onPress={() => navigation.navigate('Detail', {
      id: r.id,
      nom: r.nom,
      description: r.description,
      date: r.date,
      lieu: r.lieu,
      image: r.image,
      

  })}>
      <View key={index}>
      <ImgLazy
              source={{uri: r.image}}
              style={{width: 100, height: 100}}
              key={index}
              PlaceholderContent={<ActivityIndicator />}
            />

            <Text >{r.nom} {r.lieu} {r.date}</Text>

      </View>
  </TouchableOpacity>
  
  ))}


  

  */
// initialize data state variable as an empty array
const [data, setData] = useState([]);

const [input, setInput] = useState([]);
const [modalVisible, setModalVisible] = useState(false);
const [visible, setVisible] = useState(true);
const [itemNom, setItemNom] = useState([]);
const [itemDescription, setItemDescription] = useState([]);
const [itemDate, setItemDate] = useState([]);
const [itemLieu, setItemLieu] = useState([]);
const [itemImage, setItemImage] = useState([]);
const [itemId, setItemId] = useState([]);

const [filter, setFilter] = useState("all");
const [categories, setCategories] = useState("all");
const [searchText, setSearchText] = useState();
//

const ITEM_HEIGHT = 35; // fixed height of item component
const getItemLayout = (data, index) => {
  return {
    length: ITEM_HEIGHT,
    offset: ITEM_HEIGHT * data.length,
    index,
  };
};

// make the fetch the first time your component mounts
useEffect(() => {
  axios.get(url_programme).then(response => setData(response.data));
}, []);



function clearModal() {

  
  setVisible( true );

  setItemNom(null);
  setItemDescription(null);
  setItemDate(null);
  setItemLieu(null);
  setItemImage(null);
  setItemId(null);

}

function fillModal(id,nom,description,date,lieu,image){

  
  
 // clearModal();
  
  //setLoaderVisible( !loaderVisible );

  
  

  setItemNom(nom);
  
  setItemDescription(description);
  setItemDate(date);
  setItemLieu(lieu);
  setItemImage(image);
  setItemId(id);
  

  
  setModalVisible(true);
  

}

//setLoaderVisible(false);


const filteredData = searchText
    ? data.filter((x) =>
            x.description.toLowerCase().includes(searchText.toLowerCase()) ||
            x.nom.toLowerCase().includes(searchText.toLowerCase()) ||
            x.lieu.toLowerCase().includes(searchText.toLowerCase())

      )
    : data;

/*
return (
  <FlatList 
data={data}
keyExtractor={(r, index) => {
  // console.log("index", index)
  return index.toString();
}}
renderItem={(r, index) => 

<TouchableOpacity key={index}  onPress={() => navigation.navigate('Detail', {
      id: r.id,
      nom: r.nom,
      description: r.description,
      date: r.date,
      lieu: r.lieu,
      image: r.image,
      

  })}>
<View key={index}>
      <ImgLazy
              source={{uri: r.image}}
              style={{width: 100, height: 100}}
              key={index}
              PlaceholderContent={<ActivityIndicator />}
            />

            <Text >{r.nom} {r.lieu} {r.date}</Text>

      </View>
</TouchableOpacity>
} 

/>
);
*/
/*
function Detail({ item }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen {item.nom}</Text>
      <Button
        title="Go to Details... again"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}*/

let item_nom = '';


const renderData = (item) => {

  

  return(
    <TouchableWithoutFeedback 
    delayPressIn={10}
    onPress={fillModal.bind(this,item.id,item.nom,item.description,item.date,item.lieu,item.image)}
    
    >
      

    <Card style = {{padding:10, margin:10, backgroundColor:"#fff"}}>
    
      
    <View > 
          <ImgLazy
                source={{uri: item.image}}
                style={{width: 150, height: 200}}
                PlaceholderContent={<ActivityIndicator />}
              />
              
        </View>

        <View style={{flexDirection: "row",flexWrap: 'wrap',fontSize:18,fontWeight: 'bold'}}> 
       
          <Text >{item.nom}</Text>
          <Text style = {{fontWeight: 'bold'}}>du 5 au 28 juillet</Text>
          <Text>relâche les 10, 17, 24 à 12h00 - Durée 1h25</Text>
          <Text style={{backgroundColor: '#221f1f', color: '#fff'}}>Tout public</Text>
          <Text style={styles.welcome} >Humour</Text>
          <Text style={{backgroundColor: '#221f1f'}}>Tout public</Text>
        </View> 


       
   
</Card>  
</TouchableWithoutFeedback>
  

  )

}

/*


        <View style={{width: 200, flex: 1,  alignItems: 'right',flexDirection: "row"}}> 
          <Text style = {{fontSize:18,fontWeight: 'bold'}}>{item.nom}</Text>
          <Text style = {{fontWeight: 'bold'}}>du 5 au 28 juillet</Text>
          <Text>relâche les 10, 17, 24 à 12h00 - Durée 1h25</Text>
          <Text style={{backgroundColor: '#221f1f', color: '#fff'}}>Tout public</Text>
         
          <Text style={{backgroundColor: '#221f1f'}}>Tout public</Text>
        </View>

        */


return (
  <View >







      <TextInput
      style = {{padding:10, margin:10, backgroundColor:"#fff"}}
            autoCapitalize="none"

            onChangeText={(text) => {
                setSearchText(text);
            }}
            value={searchText}
        />    





    


<FlatList
data={filteredData}
removeClippedSubviews={true}
//getItemLayout={getItemLayout}


maxToRenderPerBatch={7}
initialNumToRender="7"

onEndReached={({ distanceFromEnd }) => {
  if (distanceFromEnd < 0) return;
 
}}





	keyExtractor={(item, index) => {
			// console.log("index", index)
			return index.toString();
		}}

    renderItem = {({item}) => {
      return renderData(item)
  }}


	
	/>



<Modal
       // animationType={'slide'}
        transparent={true}
        visible={modalVisible}
        style={{ margin: 0 }}
        onRequestClose={() => {
          //Alert.alert('Modal has been closed.');
          setModalVisible(!modalVisible);
          
        }}>
          <View  style=
          {{flex: 1, 

            height: '100%',
            width: '100%',
            backgroundColor: '#FFFFFF',
 
           marginTop: 0,

          //  borderRadius: 10,
            borderWidth: 1,
           // borderColor: '#fff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderLeftWidth: 0,
            borderRightWidth: 0,
            shadowColor: '#000',
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.8,
            shadowRadius: 2,
            elevation: 1,

             /* borderTopLeftRadius: 10,
              borderTopRightRadius:10,
              borderBottomLeftRadius: 10,
              borderBottomRightRadius:10,*/
            }}>


          

        <Pressable
              
              onPress={() => setModalVisible(!modalVisible)}>
              <Text >Fermer</Text>
            </Pressable>

            <Text >{itemNom}</Text>
            <Text >{itemDescription}</Text>
            <Text >{itemDate}</Text>
            <Text >{itemLieu}</Text>
            <ImgLazy 
            PlaceholderContent={<ActivityIndicator />}
            source={{uri: itemImage}} style={{width: 100, height: 100}}/>
           

           
            
            </View>
      </Modal>




  </View>
  
  );


  /*


    {visible && <View
      style={{
        ...StyleSheet.absoluteFill,
        justifyContent: 'center',
        alignItems: 'center',
      }}>
     <ActivityIndicator
        size="large"
        color="#00B8D4"
        animating={visible}
        style={{ marginBottom: 20 }} />
  </View>} 

  */


/*

renderItem={({ item }) => {


			return (
<TouchableOpacity  
 onPress={() => navigation.navigate('Detail', {item}) 
}>

 
<View>
      <ImgLazy
              source={{uri: item.image}}
              style={{width: 100, height: 100}}
              
              PlaceholderContent={<ActivityIndicator />}
            />

            <Text >{item.nom} </Text>

      </View>
      </TouchableOpacity>

			)
		}}

    */



  }


    const styles2 = StyleSheet.create({
      centeredView: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 22,
      },
      modalView: {
        margin: 20,
        backgroundColor: 'white',
        borderRadius: 20,
        padding: 35,
        alignItems: 'center',
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2,
        },
        shadowOpacity: 0.25,
        shadowRadius: 4,
        elevation: 5,
      },
      button: {
        borderRadius: 20,
        padding: 10,
        elevation: 2,
      },
      buttonOpen: {
        backgroundColor: '#F194FF',
      },
      buttonClose: {
        backgroundColor: '#2196F3',
      },
      textStyle: {
        color: 'white',
        fontWeight: 'bold',
        textAlign: 'center',
      },
      modalText: {
        marginBottom: 15,
        textAlign: 'center',
      },
    
      labelCard: {
        backgroundColor: '#2196F3',
      },
      
    });






 


  